*******************************ESTENSIONE 1***********************************

rende possibile utilizzare come parametri di un "==" e dei rami then ed else di un "if-then-else" due espressioni non solo quando sono una sottotipo dell'altra, ma anche quando hanno un lowest common ancestor

TYPE-CHECKING

** FOOLlib gestione tipi **

metodo "Node lowestCommonAncestor(Node a, Node b)" che:
- per a e b tipi classe (o EmptyTypeNode)
all'inizio considera la classe "a" e risale le sue super classi (tramite la funzione "superType") 
controllando, ogni volta, se "b" sia sottotipo (metodo "isSubtype") della classe considerata: 
torna tale classe qualora il controllo abbia, prima o poi, successo, altrimenti null.
(se uno tra a e b è di tipo EmptyTypeNode torna l'altro)
- per a e b tipi funzionali con stesso numero di tipi parametri
controlla se esiste il lowest common ancestor dei due tipi di ritorno di a e b (si richiama ricorsivamente) e... se, per ogni i, i due tipi parametro i-esimi sono uno sottotipo dell'altro (metodo "isSubtype"): 
se il controllo non ha successo torna null, 
altrimenti torna un tipo funzionale che ha come tipo di ritorno il risultato della chiamata 
 ricorsiva e come tipo di parametro i-esimo il tipo che è sottotipo dell'altro.
- per a e b tipi bool/int 
torna int se almeno uno è int, bool altrimenti 
- in ogni altro caso torna null

** Espressioni **

IfNode
chiama lowestCommonAncestor sui tipi delle espressioni del then e dell'else:
se ritorna null typechecking fallisce, altrimenti restituisce il tipo tornato

EqualNode
su tipi funzionali typechecking comunque fallisce, altrimenti fallisce solo se lowestCommonAncestor ritorna null

*******************************ESTENSIONE 2***********************************

rende possibile rilevare la ridefinizione (erronea) di campi e metodi con stesso nome effettuata all'interno della stessa classe e migliora l'efficienza nel controllo di correttezza tipi in overridng

FUNZIONAMENTO PARSER

**Class Table**

CTentry estesa con:
HashSet<Integer> locals           offsets di campi e metodi definiti da questa classe

Quando creo una nuova CTentry il suo HashSet "locals" viene sempre creato vuoto,
anche se la classe dichiarata eredita da un'altra.

Quando ho dichiarazione di un campo/metodo 
- se il suo offset non è presente in "locals" aggiungo il suo offset in "locals"
- altrimenti si tratta di una ridefinizione effettuata all'interno della stessa classe:
   notifico errore

TYPE-CHECKING

** Dichiarazioni **
-ClassNode
in caso di ereditarietà controlla che l'overriding sia di campi che di metodi 
sia corretto usando i campi allFields e allMethods delle CTentry in classEntry e superEntry:
in particolare usa l'HashSet "locals" della CTentry in classEntry per stabilire su quali campi e metodi sia veramente necessario fare tale controllo



