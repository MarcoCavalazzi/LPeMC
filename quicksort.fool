let
  class List (f:int, r:List) {
    fun first:int() f;
    fun rest:List() r; 
  }
  
  fun printList:List (l:List) 
    let  
      fun makeList:List (l:List, i:int) new List (i,l);
      fun printL:List (l:List)    
        if (l == null) then {null}
                       else {makeList(printL(l.rest()),print(l.first()))};
    in  printL(l);
  
  fun append:List (l1:List, l2:List)
      if (l1 == null)
        then {l2}
        else {new List(l1.first(), append(l1.rest(),l2))} ;  
  
  fun filter:List (l:List,check:(int)->bool) 
      if (l == null) 
        then {null}
        else {if (check(l.first()))
              then {new List(l.first(),filter(l.rest(),check))}
              else {filter(l.rest(),check)}};
  
  fun quicksort:List (l:List, rel:(int,int)->bool)    
      let
        var pivot:int = if (l==null) then {0} else {l.first()}; 
        fun prec:bool (x:int) rel(x,pivot);
        fun succ:bool (x:int) rel(pivot,x);
      in        
         if (l == null) 
           then {null}
           else {append( quicksort(filter(l,prec),rel),
                         new List(pivot, quicksort(filter(l,succ),rel)) )};
  
  fun increasing:List(l:List) 
    let fun inc:bool (x:int,y:int) not(y<=x);
    in quicksort(l,inc);
  
  fun decreasing:List(l:List) 
    let fun dec:bool (x:int,y:int) not(x<=y);
    in quicksort(l,dec);   
  var l:List = new List (-3, 
                    new List(4,
                        new List(6,
                            new List (1, 
                                new List(2,
                                    new List(5,null))))));
  
in printList(increasing(l));
